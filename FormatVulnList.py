import pandas as pd
import openpyxl
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Border, Side
from datetime import datetime
from tkinter import Tk
from tkinter import filedialog
import os

# Function to ask for save location
def ask_save_location():
    root = Tk()
    root.withdraw()
    save_location = filedialog.askdirectory()
    root.destroy()
    return save_location

# Read the chosen CSV file
csv_file_path = filedialog.askopenfilename(title="Select CSV file", filetypes=[("CSV files", "*.csv")])
df = pd.read_csv(csv_file_path)

# List of columns to remove
columns_to_remove = ["Mark Type", "Mark Reason", "Marked By", "Marked Date", "Endpoint Type", "Domain", "Account", "Site", "Group", "Type"]

# Remove the specified columns
df = df.drop(columns=columns_to_remove)

# Generate the current date and time
current_date = datetime.now().strftime("%Y-%m-%d")

# Ask where to save the file with current date
output_file = f"risks-list-updated-{current_date}.xlsx"
save_location = ask_save_location()

# Create the directory if it doesn't exist
if not os.path.exists(save_location):
    os.makedirs(save_location)

# Save the CSV to Excel file
df.to_excel(os.path.join(save_location, output_file), index=False)

# Output saved location
print(f"File saved as: {os.path.join(save_location, output_file)}")

# Open the chosen Excel sheet and load the workbook
excel_file_path = filedialog.askopenfilename(title="Select Excel file", filetypes=[("XLSX files", "*.xlsx")])
workbook = load_workbook(excel_file_path)
ws = workbook.active

print("Freezing top row and coloring new excel worksheet")
# Freeze the top row
ws.freeze_panes = 'B2'

# Define the column to check and the color to apply
column_to_check = "F"
color_dict = {
    "LOW": "FCD5B4",
    "CRITICAL": "FF0000",
    "HIGH": "FF7C80",
    "MEDIUM": "FFC000"
}

# Function to color rows based on matching values
def color_rows_by_value(ws, column_to_check, color_dict):
    column_index = openpyxl.utils.column_index_from_string(column_to_check)
    
    for row in ws.iter_rows(min_row=2, min_col=column_index, max_col=column_index):
        for cell in row:
            cell_value = cell.value
            if cell_value in color_dict:
                color = color_dict[cell_value]
                for col_idx in range(1, ws.max_column + 1):
                    ws.cell(row=cell.row, column=col_idx).fill = PatternFill(start_color=color, end_color=color, fill_type="solid")

# Call the coloring function
color_rows_by_value(ws, column_to_check, color_dict)

print("Painted, now adding borders")

# Apply thin black border around each cell
def apply_border(ws):
    black = "000000"
    thin_border = Border(left=Side(style='thin', color=black),
                         right=Side(style='thin', color=black),
                         top=Side(style='thin', color=black),
                         bottom=Side(style='thin', color=black))
    for row in ws.iter_rows():
        for cell in row:
            cell.border = thin_border

# Call border function
apply_border(ws)

print("Adding Filter...")

# Add a filter in the sheet
def add_filters(ws):
    ws.auto_filter.ref = ws.dimensions

# Call filter function
add_filters(ws)

print("Saving file...")

workbook.save(excel_file_path)

print("Comparing Old report vs. New report..")
print("Open the New Report")
csv_file_path1 = filedialog.askopenfilename(title="Select New Report", filetypes=[("XLSX files", "*.xlsx")])
df1 = pd.read_excel(csv_file_path1)

print("Open the old report")
csv_file_path2 = filedialog.askopenfilename(title="Select Old Report", filetypes=[("XLSX files", "*.xlsx")])
df2 = pd.read_excel(csv_file_path2)

# Check if 'CVE ID' column exists in both dataframes
column_to_check = 'CVE ID'
if column_to_check not in df1.columns or column_to_check not in df2.columns:
    raise ValueError(f"'{column_to_check}' is not a valid column name in one of the files.")

# Find the matching values in the specified column
matching_values = set(df1[column_to_check]).intersection(set(df2[column_to_check]))

# Define the color dictionary for matching values
color_dict = {value: '90EE90' for value in matching_values}  # Light green color

# Load the workbook and the sheet to color the rows
wb1 = load_workbook(csv_file_path1)
sheet = wb1.active

# Convert column name to column letter
column_letter = openpyxl.utils.get_column_letter(df1.columns.get_loc(column_to_check) + 1)

print("Coloring rows...")
# Apply the color to the matching rows in the specified column
color_rows_by_value(sheet, column_letter, color_dict)

print("Saving file...")
# Save the workbook
wb1.save(f"risks-list-colored-{current_date}.xlsx")

print("Script completed.")
